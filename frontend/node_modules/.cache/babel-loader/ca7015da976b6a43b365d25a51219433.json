{"ast":null,"code":"import axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\nimport { DOMAIN } from \"../../utils/settings/config\";\n\nconst refreshToken = async () => {\n  try {\n    const response = await axios.post(`${DOMAIN}/api/v1/users/refresh`, {\n      withCredentials: true\n    });\n    return response.data;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const createAxios = (user, dispatch, stateSuccess) => {\n  let newInstance = axios.create();\n  newInstance.interceptors.request.use(async config => {\n    let date = new Date();\n    const decocedToken = jwt_decode(user === null || user === void 0 ? void 0 : user.token);\n\n    if (decocedToken.exp < date.getTime() / 1000) {\n      const data = await refreshToken();\n      console.log({\n        data\n      });\n      const refreshUser = { ...user,\n        token: data.accessToken\n      };\n      dispatch(stateSuccess(refreshUser));\n      config.headers[\"token\"] = \"Bearer \" + data.accessToken;\n    }\n\n    return config;\n  }, err => {\n    return Promise.reject(err);\n  });\n  return newInstance;\n};","map":{"version":3,"names":["axios","jwt_decode","DOMAIN","refreshToken","response","post","withCredentials","data","err","console","log","createAxios","user","dispatch","stateSuccess","newInstance","create","interceptors","request","use","config","date","Date","decocedToken","token","exp","getTime","refreshUser","accessToken","headers","Promise","reject"],"sources":["/home/sky/shopping-ecommerce/frontend/src/services/API/createInstanceApi.js"],"sourcesContent":["import axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\nimport { DOMAIN } from \"../../utils/settings/config\";\n\nconst refreshToken = async () => {\n  try {\n    const response = await axios.post(`${DOMAIN}/api/v1/users/refresh`, {\n      withCredentials: true,\n    });\n    return response.data;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const createAxios = (user, dispatch, stateSuccess) => {\n  let newInstance = axios.create();\n  newInstance.interceptors.request.use(\n    async (config) => {\n      let date = new Date();\n      const decocedToken = jwt_decode(user?.token);\n      if (decocedToken.exp < date.getTime() / 1000) {\n        const data = await refreshToken();\n        console.log({ data });\n        const refreshUser = {\n          ...user,\n          token: data.accessToken,\n        };\n        dispatch(stateSuccess(refreshUser));\n        config.headers[\"token\"] = \"Bearer \" + data.accessToken;\n      }\n      return config;\n    },\n    (err) => {\n      return Promise.reject(err);\n    }\n  );\n  return newInstance;\n};\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,MAAT,QAAuB,6BAAvB;;AAEA,MAAMC,YAAY,GAAG,YAAY;EAC/B,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAN,CAAY,GAAEH,MAAO,uBAArB,EAA6C;MAClEI,eAAe,EAAE;IADiD,CAA7C,CAAvB;IAGA,OAAOF,QAAQ,CAACG,IAAhB;EACD,CALD,CAKE,OAAOC,GAAP,EAAY;IACZC,OAAO,CAACC,GAAR,CAAYF,GAAZ;EACD;AACF,CATD;;AAWA,OAAO,MAAMG,WAAW,GAAG,CAACC,IAAD,EAAOC,QAAP,EAAiBC,YAAjB,KAAkC;EAC3D,IAAIC,WAAW,GAAGf,KAAK,CAACgB,MAAN,EAAlB;EACAD,WAAW,CAACE,YAAZ,CAAyBC,OAAzB,CAAiCC,GAAjC,CACE,MAAOC,MAAP,IAAkB;IAChB,IAAIC,IAAI,GAAG,IAAIC,IAAJ,EAAX;IACA,MAAMC,YAAY,GAAGtB,UAAU,CAACW,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEY,KAAP,CAA/B;;IACA,IAAID,YAAY,CAACE,GAAb,GAAmBJ,IAAI,CAACK,OAAL,KAAiB,IAAxC,EAA8C;MAC5C,MAAMnB,IAAI,GAAG,MAAMJ,YAAY,EAA/B;MACAM,OAAO,CAACC,GAAR,CAAY;QAAEH;MAAF,CAAZ;MACA,MAAMoB,WAAW,GAAG,EAClB,GAAGf,IADe;QAElBY,KAAK,EAAEjB,IAAI,CAACqB;MAFM,CAApB;MAIAf,QAAQ,CAACC,YAAY,CAACa,WAAD,CAAb,CAAR;MACAP,MAAM,CAACS,OAAP,CAAe,OAAf,IAA0B,YAAYtB,IAAI,CAACqB,WAA3C;IACD;;IACD,OAAOR,MAAP;EACD,CAfH,EAgBGZ,GAAD,IAAS;IACP,OAAOsB,OAAO,CAACC,MAAR,CAAevB,GAAf,CAAP;EACD,CAlBH;EAoBA,OAAOO,WAAP;AACD,CAvBM"},"metadata":{},"sourceType":"module"}